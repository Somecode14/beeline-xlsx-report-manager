import os
import logging

import telebot

import xlsx

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

context_descriptions = "/upload_records ‚Äî –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –±–∞–∑—É.\n/upload_stats ‚Äî –≠—Ç–æ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç.\n\n/cancel ‚Äî –û—Ç–º–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º"

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n/upload_records ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ –±–∞–∑—É\n/upload_stats ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .xlsx, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    log_interaction(message, "sent /start")

@bot.message_handler(content_types=['document'])
def doc_no_context(message):
    # Runs when the user sends a document without running any commands before that.
    # The bot asks whether the document is a list of records or a stats file.
    doc_name = message.document.file_name
    log_interaction(message, f"sent a document: \"{doc_name}\"")
    if doc_name.endswith(".xlsx"):
        xlsx_doc_info = bot.get_file(message.document.file_id)
        xlsx_doc = bot.download_file(xlsx_doc_info.file_path)
        path = "input/" + doc_name

        bot.reply_to(message, f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ß—Ç–æ –±—É–¥–µ–º —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å?\n\n{context_descriptions}")
        bot.register_next_step_handler(message, get_context, xlsx_doc, path)
    else:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
        logging.info("It is not an .xlsx file, nothing happened.")

def get_context(message, xlsx_doc, path):
    # Runs when the user sends a document without running any commands before that
    # and only then answers whether the document is a list of records or a stats file.
    if message.text == "/upload_records":
        bot.reply_to(message, "–≠—Ç–∞ –∑–∞–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –°–ó_Number.")
        bot.register_next_step_handler(message, sz_number_listener, xlsx_doc, path)
    elif message.text == "/upload_stats":
        doc_upload_stats(message, xlsx_doc)
    elif message.text == "/cancel":
        bot.reply_to(message, "–û–∫–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–û—Ç–ø–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∫–µ–π.")
    else:
        bot.reply_to(message, f"–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–ª–∏–∫–Ω—É–≤ –∏–ª–∏ –∫–æ—Å–Ω—É–≤—à–∏—Å—å –µ—ë.\n\n–ß—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª?\n\n{context_descriptions}")
        bot.register_next_step_handler(message, get_context, xlsx_doc, path)

# Commands without any documents previously sent ‚Üì

@bot.message_handler(commands=['upload_records'])
def upload_records(message):
    bot.reply_to(message, "–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\nüìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
    log_interaction(message, "sent /upload_records. Awaiting for an .xslx file.")
    bot.register_next_step_handler(message, doc_upload_records)

@bot.message_handler(commands=['upload_stats'])
def upload_stats(message):
    bot.reply_to(message, "–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –†–∞–Ω–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!\nüìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
    log_interaction(message, "sent /upload_stats. Awaiting for an .xslx file.")
    bot.register_next_step_handler(message, doc_upload_stats, None)

# ===
# upload_records ‚Üì
# ===

def doc_upload_records(message):
    doc_name = message.document.file_name
    log_interaction(message, f"sent a document: \"{doc_name}\"")
    if doc_name.endswith(".xlsx"):
        xlsx_doc_info = bot.get_file(message.document.file_id)
        xlsx_doc = bot.download_file(xlsx_doc_info.file_path)
        path = "input/" + doc_name

        # –°–ó_Number

        # Request the number via Telegram bot
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –°–ó_Number.")
        bot.register_next_step_handler(message, sz_number_listener, xlsx_doc, path)
    else:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
        logging.info("It is not an .xlsx file, nothing happened.")

def sz_number_listener(message, xlsx_doc, path):
    sz_number = message.text
    logging.info(f"–°–ó_Number: {sz_number} (received from {get_log_username(message.from_user)})")
    bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ CustomStatus (on/off).")
    bot.register_next_step_handler(message, custom_status_listener, xlsx_doc, path, sz_number)

def custom_status_listener(message, xlsx_doc, path, sz_number):
    custom_status = message.text
    logging.info(f"CustomStatus: {custom_status} (received from {get_log_username(message.from_user)})")
    bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ StartTime.")
    bot.register_next_step_handler(message, start_time_listener, xlsx_doc, path, sz_number, custom_status)

def start_time_listener(message, xlsx_doc, path, sz_number, custom_status):
    start_time = message.text
    logging.info(f"StartTime: {start_time} (received from {get_log_username(message.from_user)})")
    bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EndTime.")
    bot.register_next_step_handler(message, end_time_listener, xlsx_doc, path, sz_number, custom_status, start_time)

def end_time_listener(message, xlsx_doc, path, sz_number, custom_status, start_time):
    end_time = message.text
    logging.info(f"EndTime: {end_time} (received from {get_log_username(message.from_user)})")
    with open(path, "wb") as new_file:
        new_file.write(xlsx_doc)
    xlsx.get_worksheet(path, message, sz_number, custom_status, start_time, end_time)  # -> xlsx.py

# ===
# upload_stats ‚Üì
# ===

def doc_upload_stats(message, xlsx_doc):
    if xlsx_doc is None:
        doc_name = message.document.file_name
        log_interaction(message, f"sent a document: \"{doc_name}\"")
        if doc_name.endswith(".xlsx"):
            xlsx_doc_info = bot.get_file(message.document.file_id)
            xlsx_doc = bot.download_file(xlsx_doc_info.file_path)

            with open("database/stats.xlsx", "wb") as new_file:
                new_file.write(xlsx_doc)
            bot.reply_to(message, "–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
        else:
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
            logging.info("It is not an .xlsx file, nothing happened.")
    else:
        with open("database/stats.xlsx", "wb") as new_file:
            new_file.write(xlsx_doc)
        bot.reply_to(message, "–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")

# ===
#
# ===

@bot.message_handler()
def msg(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .xlsx –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    log_message(message)

def log_interaction(message, text):
    logging.info(f"<{get_log_username(message.from_user)}> {text}")

def log_message(message):
    logging.info(f"<{get_log_username(message.from_user)}>: {message.text}")

def get_log_username(user):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö.
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç @—é–∑–µ—Ä–Ω–µ–π–º–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ò–º—è –∏ –§–∞–º–∏–ª–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    if user.username is None:
        if user.last_name is None:
            return f"{user.first_name} ({user.id})"
        else:
            return f"{user.first_name} {user.last_name} ({user.id})"
    else:
        return f"@{user.username} ({user.id})"

bot.infinity_polling()