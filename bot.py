import os
import logging
from datetime import datetime

import telebot

import xlsx
import config

if os.getenv("BOT_TOKEN") is not None:
    bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
else:
    logging.exception(f"\n\nUnable to connect to the bot.\nFirst time using the program? Register a new bot via @BotFather on Telegram, then copy the API token into a .env file, like this:\nBOT_TOKEN=12345:ABCDE\n\nRestart the script after you are done.")
    exit(3)

context_descriptions = "/upload_records: –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ–±—â—É—é –±–∞–∑—É.\n/upload_stats: –≠—Ç–æ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç.\n\n/cancel: –û—Ç–º–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º"

def show_help(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n/upload_records ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ –±–∞–∑—É\n/upload_stats ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n/count_stats ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n/get_records ‚Äî —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–æ–∫\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .xlsx, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@bot.message_handler(commands=['start'])
def start(message):
    if config.has_access(message):
        log_interaction(message, "sent /start")
        show_help(message)

@bot.message_handler(content_types=['document'])
def doc_no_context(message):
    if config.has_access(message):
        # Runs when the user sends a document without running any commands before that.
        # The bot asks whether the document is a list of records or a stats file.
        doc_name = message.document.file_name
        log_interaction(message, f"sent a document: \"{doc_name}\"")
        if doc_name.endswith(".xlsx"):
            xlsx_doc_info = bot.get_file(message.document.file_id)
            xlsx_doc = bot.download_file(xlsx_doc_info.file_path)
            path = "input/" + doc_name

            bot.reply_to(message, f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n\n{context_descriptions}")
            bot.register_next_step_handler(message, get_context, xlsx_doc, path)
        else:
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
            logging.info("It is not an .xlsx file, nothing happened.")

def get_context(message, xlsx_doc, path):
    # Runs when the user sends a document without running any commands before that
    # and only then answers whether the document is a list of records or a stats file.
    if message.text == "/upload_records":
        bot.reply_to(message, "–≠—Ç–∞ –∑–∞–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –°–ó_Number.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        bot.register_next_step_handler(message, sz_number_listener, xlsx_doc, path)
    elif message.text == "/upload_stats":
        doc_upload_stats(message, xlsx_doc)
    elif message.text == "/cancel":
        bot.reply_to(message, "–û–∫–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–û—Ç–ø–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∫–µ–π.")
        log_interaction(message, "cancelled uploading.")
    else:
        bot.reply_to(message, f"–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–ª–∏–∫–Ω—É–≤ –∏–ª–∏ –∫–æ—Å–Ω—É–≤—à–∏—Å—å –µ—ë.\n\n–ß—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª?\n\n{context_descriptions}")
        bot.register_next_step_handler(message, get_context, xlsx_doc, path)

# Commands without any documents previously sent ‚Üì

@bot.message_handler(commands=['upload_records'])
def upload_records(message):
    if config.has_access(message):
        bot.reply_to(message, "–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\nüìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        log_interaction(message, "sent /upload_records. Awaiting for an .xslx file.")
        bot.register_next_step_handler(message, doc_upload_records)

@bot.message_handler(commands=['upload_stats'])
def upload_stats(message):
    if config.has_access(message):
        bot.reply_to(message, "–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –†–∞–Ω–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!\nüìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        log_interaction(message, "sent /upload_stats. Awaiting for an .xslx file.")
        bot.register_next_step_handler(message, doc_upload_stats, None)

# ===
# upload_records ‚Üì
# ===

def doc_upload_records(message):
    if message.text is not None and message.text.startswith("/"):
        bot.reply_to(message, "–û–∫–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        log_interaction(message, "cancelled the upload.")
    else:
        try:
            doc_name = message.document.file_name
            log_interaction(message, f"sent a document: \"{doc_name}\"")
            if doc_name.endswith(".xlsx"):
                xlsx_doc_info = bot.get_file(message.document.file_id)
                xlsx_doc = bot.download_file(xlsx_doc_info.file_path)
                path = "input/" + doc_name

                # –°–ó_Number

                # Request the number via Telegram bot
                bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –°–ó_Number.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
                bot.register_next_step_handler(message, sz_number_listener, xlsx_doc, path)
            else:
                bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
                logging.info("It is not an .xlsx file, nothing happened.")
        except AttributeError:
            logging.info(f"Expected a file from {get_log_username(message.from_user)}, but got AttributeError.")
            bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx ‚Äî –µ—ë –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞.\n\n/cancel, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")
            bot.register_next_step_handler(message, doc_upload_records)

def sz_number_listener(message, xlsx_doc, path):
    if message.text is not None and message.text.startswith("/"):
        cancel(message)
    else:
        sz_number = message.text
        logging.info(f"–°–ó_Number: {sz_number} (received from {get_log_username(message.from_user)})")
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ CustomStatus (on/off).\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        bot.register_next_step_handler(message, custom_status_listener, xlsx_doc, path, sz_number)

def custom_status_listener(message, xlsx_doc, path, sz_number):
    if message.text is not None and message.text.startswith("/"):
        cancel(message)
    else:
        custom_status = message.text
        logging.info(f"CustomStatus: {custom_status} (received from {get_log_username(message.from_user)})")
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–∏–ª–∏–∞–ª.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        bot.register_next_step_handler(message, department_listener, xlsx_doc, path, sz_number, custom_status)

def department_listener(message, xlsx_doc, path, sz_number, custom_status):
    if message.text is not None and message.text.startswith("/"):
        cancel(message)
    else:
        department = message.text
        logging.info(f"–§–∏–ª–∏–∞–ª: {department} (received from {get_log_username(message.from_user)})")
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ StartTime.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        bot.register_next_step_handler(message, start_time_listener, xlsx_doc, path, sz_number, custom_status, department)

def start_time_listener(message, xlsx_doc, path, sz_number, custom_status, department):
    if message.text is not None and message.text.startswith("/"):
        cancel(message)
    else:
        start_time = message.text
        logging.info(f"StartTime: {start_time} (received from {get_log_username(message.from_user)})")
        if custom_status == "on":
            end_time = ""
            logging.info(f"Leaving EndTime empty because CustomStatus is {custom_status}.")
            with open(path, "wb") as new_file:
                new_file.write(xlsx_doc)
            xlsx.get_worksheet(path, message, sz_number, custom_status, department, start_time, end_time)  # -> xlsx.py
        else:
            bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EndTime.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
            bot.register_next_step_handler(message, end_time_listener, xlsx_doc, path, sz_number, custom_status, department, start_time)

def end_time_listener(message, xlsx_doc, path, sz_number, custom_status, department, start_time):
    if message.text is not None and message.text.startswith("/"):
        cancel(message)
    else:
        end_time = message.text
        logging.info(f"EndTime: {end_time} (received from {get_log_username(message.from_user)})")
        with open(path, "wb") as new_file:
            new_file.write(xlsx_doc)
        xlsx.get_worksheet(path, message, sz_number, custom_status, department, start_time, end_time)  # -> xlsx.py

# ===
# upload_stats ‚Üì
# ===

def doc_upload_stats(message, xlsx_doc):
    if xlsx_doc is None:
        if message.text is not None and message.text.startswith("/"):
            bot.reply_to(message, "–û–∫–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
            log_interaction(message, "cancelled the upload.")
        else:
            try:
                doc_name = message.document.file_name
                log_interaction(message, f"sent a document: \"{doc_name}\"")
                if doc_name.endswith(".xlsx"):
                    xlsx_doc_info = bot.get_file(message.document.file_id)
                    xlsx_doc = bot.download_file(xlsx_doc_info.file_path)

                    with open("database/stats.xlsx", "wb") as new_file:
                        new_file.write(xlsx_doc)
                    bot.reply_to(message, "–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.\n\n/count_stats, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
                    logging.info("Overwrote database/stats.xlsx with the provided file.")
                else:
                    bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx.")
                    logging.info("It is not an .xlsx file, nothing happened.")
            except AttributeError:
                logging.info(f"Expected a file from {get_log_username(message.from_user)}, but got AttributeError.")
                bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞.\n\n/cancel, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")
                bot.register_next_step_handler(message, doc_upload_stats, None)
    else:
        with open("database/stats.xlsx", "wb") as new_file:
            new_file.write(xlsx_doc)
        bot.reply_to(message, "–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.\n\n/count_stats, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
        logging.info(f"Overwrote database/stats.xlsx with the file provided by {get_log_username(message.from_user)}.")

# ===
# count_stats ‚Üì
# ===

@bot.message_handler(commands=['count_stats'])
def count_stats(message):
    if config.has_access(message):
        bot.reply_to(message, "–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        log_interaction(message, "sent /count_stats")
        xlsx.analyze_stats(message)

# ===
# get_records ‚Üì
# ===

@bot.message_handler(commands=['get_records'])
def get_records(message):
    if config.has_access(message):
        try:
            log_interaction(message, "sent /get_records")
            database = open("database/database.xlsx", "rb")
            bot.send_document(message.chat.id, database, caption=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", reply_to_message_id=message.message_id)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n{e}")
            logging.exception(e)

# ===
# ADMIN
# ===

@bot.message_handler(commands=['whitelist_add'])
def whitelist_add(message):
    if message.from_user.id in config.admins:
        bot.reply_to(message, f"üîê –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫. –û–Ω –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–æ–∫, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n–í—Å—Ç–∞–≤—å—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —ç—Ç–æ–º—É –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        log_interaction(message, "sent /whitelist_add. Requesting User ID.")
        bot.register_next_step_handler(message, whitelist_modify_id, True)
    else:
        bot.reply_to(message, f"üîí –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å ID {message.from_user.id} –≤ —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")


@bot.message_handler(commands=['whitelist_remove'])
def whitelist_remove(message):
    if message.from_user.id in config.admins:
        bot.reply_to(message, f"üîê –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞. –û–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n\n–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–∞–∫ –∏ –í—ã, –æ–Ω —Å–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ whitelist. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.\n\n–í—Å—Ç–∞–≤—å—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ª–æ–≥–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ /get_chat_id –≤ –õ–° —Å —ç—Ç–∏–º –±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
        log_interaction(message, "sent /whitelist_remove. Requesting User ID.")
        bot.register_next_step_handler(message, whitelist_modify_id, False)
    else:
        bot.reply_to(message, f"üîí –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ –Ω–∏—Ö –∏–ª–∏, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å ID {message.from_user.id} –≤ —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

def whitelist_modify_id(message, to_add: bool):
    if message.text.startswith("/"):
        bot.reply_to(message, "–û—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")
        log_interaction(message, "sent some command. Cancelling adding to whitelist.")
    else:
        if message.from_user.id in config.admins:
            if message.text.isdecimal():
                if to_add:
                    if int(message.text) in config.whitelisted_users or message.text in config.whitelisted_users:
                        if int(message.text) in config.admins or message.text in config.admins:
                            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} —É–∂–µ –≤ whitelist–µ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n–û–Ω —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ –µ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å whitelist, –∫–∞–∫ –∏ –í—ã.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
                        else:
                            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} —É–∂–µ –≤ whitelist–µ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –º–æ–≥ –∏–∑–º–µ–Ω—è—Ç—å whitelist, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É. –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è.")
                        log_interaction(message, f"tried to add ID {message.text} to whitelist. That user is already whitelisted; nothing changed.")
                    else:
                        config.whitelisted_users.add(int(message.text))
                        log_interaction(message, f"added ID {message.text} to whitelist.")
                        config.write_config()
                        bot.reply_to(message, f"üîì –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –≤ whitelist. –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                else:
                    removed_successfully = False
                    if int(message.text) in config.whitelisted_users:
                        config.whitelisted_users.remove(int(message.text))
                        logging.info(f"Removed ID {message.text} (int) from whitelist.")
                        removed_successfully = True
                    if message.text in config.whitelisted_users:
                        config.whitelisted_users.remove(message.text)
                        logging.info(f"Removed ID {message.text} (string) from whitelist.")
                        removed_successfully = True
                    if removed_successfully:
                        config.write_config()
                        if int(message.text) in config.admins or message.text in config.admins:
                            bot.reply_to(message, f"üîì –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –∏–∑ whitelist–∞.\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–Ω –º–æ–∂–µ—Ç –≤–Ω–æ–≤—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ whitelist —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ ID –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –æ—Ç—Ç—É–¥–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.\n\n–°–Ω—è—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–ª—å–∑—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
                        else:
                            bot.reply_to(message, f"üîì –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –∏–∑ whitelist–∞. –¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
                    else:
                        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {message.text} –Ω–µ—Ç –≤ whitelist–µ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
                        log_interaction(message, f"tried to remove ID {message.text} from the whitelist. That user was not whitelisted in the first place; nothing changed.")
            else:
                bot.reply_to(message, "–ü–æ–¥–æ–π–¥—ë—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å /get_chat_id –≤ –õ–° —Å –±–æ—Ç–æ–º –∏ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –í–∞–º. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ª–æ–≥–∞—Ö ‚Äî –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
                bot.register_next_step_handler(message, whitelist_modify_id, to_add)


@bot.message_handler(commands=['get_chat_id'])
def get_chat_id(message):
    bot.reply_to(message, f"Current Chat ID: {message.chat.id}")
    log_interaction(message, "sent /get_chat_id")
# ===
#
# ===

@bot.message_handler()
def msg(message):
    if config.has_access(message):
        show_help(message)
        log_message(message)

def log_interaction(message, text):
    logging.info(f"<{get_log_username(message.from_user)}> {text}")
    if config.extended_logs_in_chats:
        for chat in config.chats:
            try:
                bot.send_message(chat, f"<{get_log_username(message.from_user)}> {text}")
            except telebot.apihelper.ApiTelegramException:
                logging.warning(f"Chat {chat} not found. Use /get_chat_id and copy the ID into config.py")

def log_message(message):
    logging.info(f"<{get_log_username(message.from_user)}>: {message.text}")

def get_log_username(user):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö.
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç @—é–∑–µ—Ä–Ω–µ–π–º–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ò–º—è –∏ –§–∞–º–∏–ª–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    if user.username is None:
        if user.last_name is None:
            return f"{user.first_name} ({user.id})"
        else:
            return f"{user.first_name} {user.last_name} ({user.id})"
    else:
        return f"@{user.username} ({user.id})"

def cancel(message):
    log_interaction(message, "sent some command. Interrupting current flow.")
    bot.reply_to(message, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å.")

bot.infinity_polling()